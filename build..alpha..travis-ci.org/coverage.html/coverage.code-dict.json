{"/home/travis/build/npmtest/node-npmtest-hyperterm-tabs/test.js":"/* istanbul instrument in package npmtest_hyperterm_tabs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperterm-tabs/lib.npmtest_hyperterm_tabs.js":"/* istanbul instrument in package npmtest_hyperterm_tabs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hyperterm_tabs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hyperterm_tabs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperterm-tabs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hyperterm-tabs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hyperterm_tabs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hyperterm_tabs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hyperterm_tabs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hyperterm_tabs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hyperterm_tabs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hyperterm_tabs.__dirname + '/lib.npmtest_hyperterm_tabs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperterm-tabs/node_modules/hyperterm-tabs/index.js":"const Mousetrap = require('mousetrap');\n\nconst LEFT = 'left';\nconst RIGHT = 'right';\n\n// exports.decorateBrowserOptions = options => Object.assign({}, options, {\n//     titleBarStyle: 'default',\n//     transparent: false,\n// });\n\nconst orderTabs = (orderedUids, tabs) => {\n    const orderedTabs = [];\n\n    orderedUids.forEach(uid => {\n        tabs.forEach(tab => {\n            if (tab.uid === uid) {\n                orderedTabs.push(tab);\n                return;\n            }\n        });\n    });\n\n    return orderedTabs;\n};\n\nexports.mapHeaderState = (state, map) => Object.assign({}, map, {\n    cols: state.ui.cols,\n    sessionsOrdered: state.termGroups.termGroupsOrdered,\n    tabs: state.termGroups.termGroupsOrdered ? orderTabs(state.termGroups.termGroupsOrdered, map.tabs) : map.tabs,\n});\n\nexports.getTabsProps = (parentProps, props) => Object.assign({}, props, {\n    tabWidth: window.innerWidth / props.tabs.length,\n    moveTab: parentProps.moveTab,\n    sessionsOrdered: parentProps.sessionsOrdered,\n});\n\nexports.getTabProps = (tab, parentProps, props) => Object.assign({}, props, {\n    tabId: tab.uid,\n    tabPosition: parentProps.tabs.indexOf(tab),\n    tabWidth: parentProps.tabWidth,\n    moveTab: parentProps.moveTab,\n    shortcutMoveTab: parentProps.shortcutMoveTab,\n});\n\nexports.getTermGroupProps = (tab, parentProps, props) => Object.assign({}, props, {\n    shortcutMoveTab: parentProps.shortcutMoveTab,\n});\nexports.getTermProps = (tab, parentProps, props) => Object.assign({}, props, {\n    shortcutMoveTab: parentProps.shortcutMoveTab,\n});\n\nconst MOVE_TAB = '@@DRAGGABLE/MOVE_TAB';\n\nconst moveTab = (uid, position, isAfter) => ({\n    type: MOVE_TAB,\n    uid,\n    position,\n    isAfter,\n});\n\nconst shortcutMoveTab = (direction) => (dispatch, getState) => {\n    const state = getState();\n    const activeUid = state.termGroups.activeRootGroup;\n    const currentIndex = state.termGroups.termGroupsOrdered.indexOf(activeUid);\n    let newPosition = direction === LEFT ? currentIndex - 1 : currentIndex + 1;\n\n    if (newPosition === -1) {\n        newPosition = state.termGroups.termGroupsOrdered.length + 1;\n    } else if (newPosition > state.termGroups.termGroupsOrdered.length - 1) {\n        newPosition = -1;\n    }\n\n    dispatch({\n        type: MOVE_TAB,\n        uid: activeUid,\n        position: newPosition,\n        isAfter: direction === RIGHT,\n    });\n};\n\nconst calculateNewIndex = (currentIndex, newIndex, isAfter) => {\n    if (currentIndex === newIndex) return currentIndex;\n\n    return (isAfter) ? newIndex + 1 : newIndex;\n};\n\nexports.reduceTermGroups = (state, action) => {\n    let currentIndex;\n    let newIndex;\n    let termGroupId;\n\n    const findTermGroupId = (termGroups = {}, sessionUid) => {\n        const termGroupsIds = Object.keys(termGroups);\n        const termGroup = termGroupsIds.filter(groupId => termGroups[groupId].sessionUid === sessionUid);\n        if (termGroup.length) {\n            return termGroup[0];\n        }\n\n        return false;\n    };\n\n    switch (action.type) {\n        case 'SESSION_ADD':\n            termGroupId = findTermGroupId(state.termGroups, action.uid);\n\n            if (termGroupId) {\n                return state.set('termGroupsOrdered', (state.termGroupsOrdered || []).concat([termGroupId]));\n            }\n\n            return state;\n\n        case 'TERM_GROUP_EXIT':\n            return state.set('termGroupsOrdered', state.termGroupsOrdered.filter(uid => uid !== action.uid));\n\n        case MOVE_TAB:\n            currentIndex = state.termGroupsOrdered.indexOf(action.uid);\n            newIndex = calculateNewIndex(currentIndex, action.position, action.isAfter);\n\n            if (currentIndex === newIndex) return state;\n\n            if (currentIndex < newIndex) {\n                return state.updateIn(['termGroupsOrdered'], (termGroups) => {\n                    const termGroupsOrder = termGroups.asMutable();\n                    // insert to the new index\n                    termGroupsOrder.splice(newIndex, 0, action.uid);\n                    // remove from the old index\n                    termGroupsOrder.splice(currentIndex, 1);\n                    return termGroupsOrder;\n                });\n            }\n\n            return state.updateIn(['termGroupsOrdered'], (termGroups) => {\n                const termGroupsOrder = termGroups.asMutable();\n                // remove from the old index\n                termGroupsOrder.splice(currentIndex, 1);\n                // insert to the new index\n                termGroupsOrder.splice(newIndex, 0, action.uid);\n                return termGroupsOrder;\n            });\n\n        default:\n            return state;\n    }\n};\n\nexports.mapHeaderDispatch = (dispatch, map) => Object.assign({}, map, {\n    moveTab(uid, position, isAfter) {\n        dispatch(moveTab(uid, position, isAfter));\n    },\n    shortcutMoveTab(direction) {\n        dispatch(shortcutMoveTab(direction));\n    },\n});\n\nexports.mapTermsDispatch = (dispatch, map) => Object.assign({}, map, {\n    moveTab(uid, position, isAfter) {\n        dispatch(moveTab(uid, position, isAfter));\n    },\n    shortcutMoveTab(direction) {\n        dispatch(shortcutMoveTab(direction));\n    },\n});\n\nconst setActiveSession = (uid) => (dispatch) => {\n    dispatch({\n        type: 'SESSION_SET_ACTIVE',\n        uid,\n    });\n};\n\nconst setActiveGroup = (uid) => (dispatch, getState) => {\n    const { termGroups } = getState();\n    dispatch(setActiveSession(termGroups.activeSessions[uid]));\n};\n\nexports.middleware = ({ dispatch, getState }) => (next) => (action) => {\n    switch (action.type) {\n        case 'UI_MOVE_TO':\n            next({\n                type: 'UI_MOVE_TO',\n                index: action.index,\n                effect() {\n                    const i = action.index;\n                    const state = getState();\n                    const { termGroupsOrdered } = state.termGroups;\n                    const uid = state.termGroups.activeRootGroup;\n                    if (uid === termGroupsOrdered[i]) {\n                        console.log('ignoring same uid');\n                    } else if (termGroupsOrdered[i]) {\n                        dispatch(setActiveGroup(termGroupsOrdered[i]));\n                    } else {\n                        console.log('ignoring inexistent index', i);\n                    }\n                },\n            });\n            break;\n\n        case 'UI_MOVE_LEFT':\n            next({\n                type: 'UI_MOVE_LEFT',\n                effect() {\n                    const state = getState();\n                    const { termGroupsOrdered } = state.termGroups;\n                    const uid = state.termGroups.activeRootGroup;\n                    const index = termGroupsOrdered.indexOf(uid);\n                    const nextGroupId = termGroupsOrdered[index - 1] || termGroupsOrdered[termGroupsOrdered.length - 1];\n                    if (!nextGroupId || uid === nextGroupId) {\n                        console.log('ignoring left move action');\n                    } else {\n                        dispatch(setActiveGroup(nextGroupId));\n                    }\n                },\n            });\n            break;\n\n        case 'UI_MOVE_RIGHT':\n            next({\n                type: 'UI_MOVE_RIGHT',\n                effect() {\n                    const state = getState();\n                    const { termGroupsOrdered } = state.termGroups;\n                    const uid = state.termGroups.activeRootGroup;\n                    const index = termGroupsOrdered.indexOf(uid);\n                    const nextGroupId = termGroupsOrdered[index + 1] || termGroupsOrdered[0];\n                    if (!nextGroupId || uid === nextGroupId) {\n                        console.log('ignoring right move action');\n                    } else {\n                        dispatch(setActiveGroup(nextGroupId));\n                    }\n                },\n            });\n            break;\n\n        default:\n            next(action);\n    }\n};\n\n\nexports.decorateTerm = (Term, { React }) => {\n    class DecoratedTerm extends React.Component {\n        constructor() {\n            super();\n\n            this.init = false;\n        }\n\n        componentDidUpdate(prev) {\n            if (prev.isTermActive !== this.props.isTermActive || !this.init) {\n                this.init = true;\n\n                if (this.keys) {\n                    this.keys.reset();\n                }\n\n                if (this.props.isTermActive) {\n                    const doc = this.el.term.document_;\n\n                    this.keys = new Mousetrap(doc);\n\n                    this.keys.bind(['alt+shift+left', 'ctrl+alt+shift+left'], () => { this.props.shortcutMoveTab(LEFT); });\n                    this.keys.bind(['alt+shift+right', 'ctrl+alt+shift+right'], () => { this.props.shortcutMoveTab(RIGHT); });\n                }\n            }\n        }\n\n        render() {\n            return React.createElement(Term, Object.assign({}, this.props, {\n                ref: (el) => { this.el = el; },\n            }));\n        }\n    }\n\n    return DecoratedTerm;\n};\n"}